{"version":3,"sources":["Legend.js","Main.js","Bars.js","ByDay.js","ByMonth.js","App.js","serviceWorker.js","index.js"],"names":["Legend","props","types","className","map","entry","i","k","v","key","Main","year","data","typeIds","getDateCount","Date","getDate","months","Array","from","length","firstDay","getDay","dateCount","allDays","fill","concat","id","name","toLocaleString","month","dateCountMax","Math","max","m","weekCount","ceil","days","repeat","split","slice","useState","tooltip","setTooltip","inactiveDays","setInactiveDays","showDetail","day","dateStr","activities","content","a","type","note","__html","join","getInactiveDays","prevDay","count","Object","keys","d","j","isHover","onMouseOver","onMouseOut","viewBox","xlinkHref","dangerouslySetInnerHTML","Bars","maxVal","w","style","width","toFixed","values","reduce","acc","num","DAYS","ByDay","ByMonth","totals","maxTotal","totalW","val","left","YEAR","WORDS","App","sorted","entries","sort","b","item","index","by_day","by_month","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a77d57d2.chunk.js","sourcesContent":["import React from 'react';\nimport './Legend.css';\n\nfunction Legend(props) {\n  const {types} = props;\n\n  return <div className=\"Legend\">\n    <div className=\"types\">\n      {types.map((entry, i) => {\n        const [k, v] = entry;\n        return (<div key={k} className=\"item\">\n          <div className=\"type\">\n            <div className={`icon bg-${i}`}/>\n            <div>{k}:</div>\n          </div>\n          <div className=\"count\">{v} time{v !== 1 ? 's' : ''}</div>\n        </div>);\n      })}\n    </div>\n  </div>\n}\n\nexport default Legend;\n","import React, {useState} from 'react';\nimport './Main.css';\n\nfunction Main(props) {\n  const {year, data, typeIds} = props;\n\n  const getDateCount = (i) => { return new Date(year, i + 1, 0).getDate(); }\n  const months = Array.from({length: 12}, (v, i) => {\n    const firstDay = new Date(year, i, 1).getDay();\n    const dateCount = getDateCount(i);\n    // fill empty string till the first day when the first day is not Sunday\n    const allDays = Array(firstDay).fill('').concat(\n      ...Array.from({length: dateCount}, (v, i) => i + 1)\n    );\n    return {\n      id: i + 1,\n      name: new Date(year, i).toLocaleString('en-US', {month: 'long'}),\n      allDays,\n    };\n  });\n\n  // get the largest day count including empty days from Sunday\n  let dateCountMax = Math.max(...months.map(m => m.allDays.length));\n  // get day labels from Sunday to the day of the late date in the year\n  const weekCount = Math.ceil(dateCountMax / 7);\n  const days = 'Sun/Mon/Tue/Wed/Thu/Fri/Sat/'\n    .repeat(weekCount)\n    .split('/')\n    .slice(0, 7 * weekCount - (7 - dateCountMax % 7));\n\n  const getInactiveDays = (month, day, inactiveDays) => {\n    const prevDay = day > 1 ?\n      [month, day - 1]:\n      (month > 1 ? [month - 1, getDateCount(month - 2)] : null);\n    // if it's not January 1st\n    if (prevDay != null) {\n      const dateStr = prevDay.join('/');\n      // when there's data in the previous day\n      if (data[dateStr] != null) {\n        return inactiveDays;\n      } else {\n        inactiveDays[dateStr] = true;\n        // recursive when the date is inactive\n        return getInactiveDays(...prevDay, inactiveDays);\n      }\n    } else {\n      return inactiveDays;\n    }\n  }\n\n  // tooltip content when an active day is hovered\n  const [tooltip, setTooltip] = useState(null);\n  // all previous inactive days when an inactive day is hovered\n  const [inactiveDays, setInactiveDays] = useState({});\n\n  const showDetail = (month, day) => {\n    const dateStr = `${month}/${day}`;\n    const activities = data[dateStr];\n    if (activities != null) {\n      const content = activities.map(a =>\n        `<div class=\"tooltip-activity\">\n          <span class=\"tooltip-type bg-${typeIds[a.type]}\">${a.type}</span>\n          <span>${a.note}</span>\n        </div>`\n      );\n      setTooltip({\n        dateStr,\n        content: {__html: content.join('')},\n      });\n      setInactiveDays({});\n    } else if (day !== '') {\n      setInactiveDays(getInactiveDays(month, day, {[dateStr]: true}));\n      const count = Object.keys(inactiveDays).length;\n      setTooltip({\n        dateStr,\n        content: {__html: `Inactive for ${count} day${count === 1 ? '' : 's'}`},\n      });\n    }\n  };\n\n  const hideDetail = () => {\n    setTooltip(null);\n  };\n\n  return (<table className=\"Main\">\n    {/* day labels - Sun, Mon, Tue...*/}\n    <thead>\n      <tr className=\"row-day\">\n        <td/>\n        <td className=\"week-label\">\n          {days.map((d, j) => <div key={j} className=\"day\">{d}</div>)}\n        </td>\n      </tr>\n    </thead>\n    {/* all 365 days */}\n    <tbody>\n      {months.map((month, i) => <tr key={i} className=\"month\">\n        <td className=\"month-name\">{month.name}</td>\n        <td className=\"month-dates\">\n          {/* each month */}\n          {month.allDays.map((day, i) => {\n            const dateStr = `${month.id}/${day}`;\n            const activities = data[dateStr];\n            // when hovered show black bg & white text\n            const isHover = tooltip != null && tooltip.dateStr === dateStr;\n            return (<div key={i}\n              className={`date${isHover ? ' black' : ''}${day !== '' ? ' valid' : ''}${activities != null ? ' with-data' : ''}`}\n              onMouseOver={() => showDetail(month.id, day)}\n              onMouseOut={() => hideDetail()}\n              >\n              {/* fill SVG background when there are activities,\n                assuming there are only upto 2 kinds of activities in one day */}\n              {activities != null && <>\n                {activities.map((a, j) => <div key={j}\n                  className={`active fill-${isHover ? 'black' : typeIds[a.type]}`}>\n                  <svg viewBox=\"0 0 32 32\" className={`fill${j === 1 ? '-half' : ''}`}>\n                    <use xlinkHref={`#fill${j === 1 ? '-half' : ''}`}/>\n                  </svg>\n                </div>)}\n              </>}\n              {inactiveDays[dateStr] === true && <div className=\"inactive\">\n                <svg viewBox=\"0 0 24 24\" className=\"fill\">\n                  <use xlinkHref=\"#inactive\"/>\n                </svg>\n              </div>}\n              <div>{day}</div>\n              {isHover && <div className=\"tooltip\">\n                <div className=\"tooltip-content\">\n                  <div>{tooltip.dateStr}</div>\n                  <div dangerouslySetInnerHTML={tooltip.content}/>\n                </div>\n                <div className=\"tooltip-arrow\"/>\n              </div>}\n            </div>);\n          })}\n        </td>\n      </tr>)}\n    </tbody>\n  </table>);\n}\n\nexport default Main;\n","import React from 'react';\nimport './Bars.css';\n\nfunction Bars(props) {\n  const {data, types, maxVal} = props;\n\n  return <div className=\"Bars\">\n    {types.map((type, i) => {\n      const w = 100 * data[type] / maxVal;\n      return (<div key={type} className=\"row bar-wrapper\">\n        { w > 0 && <div className={`bar bg-${i}`} style={{width: w.toFixed(1) + '%'}}/>}\n        <div className={`value${w > 90 ? ' inside': ''}`}>{data[type]}</div>\n      </div>);\n    })}\n    <div className=\"row total\">\n      <span className=\"number\">\n        {Object.values(data).reduce((acc, num) => acc + num, 0)}\n      </span>\n    </div>\n  </div>;\n}\n\nexport default Bars;\n","import React from 'react';\nimport Bars from './Bars';\nimport './ByDay.css';\n\nconst DAYS = 'Sunday/Monday/Tuesday/Wednesday/Thursday/Friday/Saturday'.split('/');\n\nfunction ByDay(props) {\n  const {data, types} = props;\n  const maxVal = Math.max(...data.map(d => Math.max(...Object.values(d))));\n\n  return <div className=\"ByDay\">\n    <div className=\"labels\">\n      {types.concat('Total').map(type =>\n        <div key={type} className={`row label${type === 'Total' ? ' total' : ''}`}>\n          <span className=\"text\">{type}</span>\n        </div>\n      )}\n    </div>\n    <div className=\"days\">\n      {data.map((d, i) => <div key={i} className=\"day-wrapper\">\n        <div className=\"day-title\">{DAYS[i]}</div>\n        <Bars data={d} types={types} maxVal={maxVal}/>\n      </div>)}\n    </div>\n  </div>\n}\n\nexport default ByDay;\n","import React from 'react';\nimport './ByMonth.css';\n\nfunction ByMonth(props) {\n  const {data, types} = props;\n\n  // get Jan, Feb, Mar...\n  const months = Array(12).fill(null).map((v, i) => {\n    return new Date(2020, i).toLocaleString('en-US', {month: 'long'})\n  });\n\n  const totals = data.map(d => Object.values(d).reduce((acc, num) => acc + num, 0));\n  const maxTotal = Math.max(...totals);\n\n  return (\n    <table className=\"ByMonth\">\n      <tbody>\n        {months.map((m, i) => {\n          const totalW = 100 * totals[i] / maxTotal;\n          return (<tr key={m}>\n            <td className=\"label\">{m}</td>\n            <td className=\"stacked\">\n              {types.map((type, j) => {\n                // width of each type value\n                const val = data[i][type];\n                const w = 100 * val / maxTotal;\n                if (w > 0) {\n                  return <div key={j}\n                    className={`stack bg-${j}`}\n                    style={{width: w.toFixed(2) + '%'}}>\n                    {val}\n                  </div>;\n                }\n              })}\n              <div className=\"total\" style={{left: totalW.toFixed(2) + '%'}}>\n                {totals[i]}\n              </div>\n            </td>\n          </tr>);\n        })}\n      </tbody>\n    </table>\n  );\n}\nexport default ByMonth;\n","import React from 'react';\nimport './App.css';\nimport Legend from './Legend';\nimport Main from './Main';\nimport data from './data/data';\nimport ByDay from './ByDay';\nimport ByMonth from './ByMonth';\n\nconst YEAR = 2019;\nconst WORDS = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'];\n\nfunction App() {\n  // this can be done in data genertion phase but let's keep it here for now\n  const sorted = Object.entries(data.types).sort((a, b) => b[1] - a[1]);\n  const typeIds = sorted.reduce((acc, item, index) => {\n    acc[item[0]] = index;\n    return acc;\n  }, {});\n  const types = sorted.map(d => d[0]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"title\">\n          {WORDS[Object.keys(data.types).length - 1]} Shades of Exercise in {YEAR}\n        </div>\n        <Legend types={sorted}/>\n        <Main year={YEAR} data={data.data} typeIds={typeIds} />\n        <ByDay data={data.by_day} types={types}/>\n        <ByMonth data={data.by_month} types={types}/>\n        <div className=\"Footer\">\n          Created by <a href=\"http://tany.kim\" target=\"_blank\" rel=\"noopener noreferrer\">Tanyoung Kim</a>&nbsp;&nbsp;|&nbsp;&nbsp;View code on <a href=\"https://github.com/tanykim/shades-of-exercise\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}